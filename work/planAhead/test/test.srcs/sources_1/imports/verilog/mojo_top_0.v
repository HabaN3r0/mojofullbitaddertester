/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [1:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [3:0] io_dip,
    input sumout,
    input cout,
    output reg ain,
    output reg bin,
    output reg cin
  );
  
  
  
  reg rst;
  
  integer count;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_ctr_value;
  counter_2 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  localparam OOO_state = 3'd0;
  localparam OOI_state = 3'd1;
  localparam OIO_state = 3'd2;
  localparam OII_state = 3'd3;
  localparam IOO_state = 3'd4;
  localparam IOI_state = 3'd5;
  localparam IIO_state = 3'd6;
  localparam III_state = 3'd7;
  
  reg [2:0] M_state_d, M_state_q = OOO_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    io_led[0+0-:1] = sumout;
    io_led[1+0-:1] = cout;
    if (io_dip[0+0-:1] == 1'h1) begin
      if (count == 1'h0) begin
        M_state_d = OOO_state;
      end
      count = 1'h1;
      M_state_d = M_state_q + clk;
      if (M_state_q == 4'h8) begin
        M_state_d = 1'h0;
      end
      
      case (M_state_q)
        OOO_state: begin
          ain = 1'h0;
          bin = 1'h0;
          cin = 1'h0;
          io_sel = 4'he;
          io_seg = 8'h3f;
        end
        OOI_state: begin
          ain = 1'h0;
          bin = 1'h0;
          cin = 1'h1;
          io_sel = 4'he;
          io_seg = 8'h06;
        end
        OIO_state: begin
          ain = 1'h0;
          bin = 1'h1;
          cin = 1'h0;
          io_sel = 4'he;
          io_seg = 8'h3f;
        end
        OII_state: begin
          ain = 1'h0;
          bin = 1'h1;
          cin = 1'h1;
          io_sel = 4'he;
          io_seg = 8'h06;
        end
        IOO_state: begin
          ain = 1'h1;
          bin = 1'h0;
          cin = 1'h0;
          io_sel = 4'he;
          io_seg = 8'h3f;
        end
        IOI_state: begin
          ain = 1'h1;
          bin = 1'h0;
          cin = 1'h1;
          io_sel = 4'he;
          io_seg = 8'h06;
        end
        IIO_state: begin
          ain = 1'h1;
          bin = 1'h1;
          cin = 1'h0;
          io_sel = 4'he;
          io_seg = 8'h3f;
        end
        III_state: begin
          ain = 1'h1;
          bin = 1'h1;
          cin = 1'h1;
          io_sel = 4'he;
          io_seg = 8'h06;
        end
        default: begin
          ain = 1'h0;
          bin = 1'h0;
          cin = 1'h0;
          io_sel = 4'he;
          io_seg = 8'h00;
        end
      endcase
    end else begin
      count = 1'h0;
      ain = io_dip[1+0-:1];
      bin = io_dip[2+0-:1];
      cin = io_dip[3+0-:1];
      io_sel = 4'he;
      io_seg = 8'hff;
    end
  end
  
  always @(posedge clk) begin
    M_state_q <= M_state_d;
  end
  
endmodule
