module mojo_top #(SIZE = 8: SIZE > 0)   (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
//    output led [8],         // 8 user controllable LEDs
//    input cclk,             // configuration clock, AVR ready when high
//    output spi_miso,        // AVR SPI MISO
//    input spi_ss,           // AVR SPI Slave Select
//    input spi_mosi,         // AVR SPI MOSI
//    input spi_sck,          // AVR SPI Clock
//    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
//    input avr_tx,           // AVR TX (FPGA RX)
//    output avr_rx,          // AVR RX (FPGA TX)
//    input avr_rx_busy,      // AVR RX buffer full
//    output io_led [3][8],   // LEDs on IO Shield
    output io_led [2],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
//   input io_button [5],    // 5 buttons on IO Shield
//    input io_dip [3][8],     // DIP switches on IO Shield
    input io_dip [4],     // DIP switches on IO Shield
    input sumout,
    input cout,
    output ain,
    output bin,
    output cin
  )
  
  {  
  sig rst;                  // reset signal
  var count;

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
//    edge_detector edge_detector (#RISE(1), #FALL(0));
    
    .rst(rst) {
//      multi_seven_seg seg;
//      multi_dec_ctr dec_ctr;
      counter ctr (#SIZE(1), #DIV(24));
    }
    fsm state(.clk(clk), #INIT(OOO))={OOO,OOI,OIO,OII,IOO,IOI,IIO,III};
  }
  
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset

    io_led[0] = sumout;
    io_led[1] = cout;

    if(io_dip[0] == 1){
      if(count == 0){
        state.d = state.OOO;
        }
        count = 1;
//      io_seg = 8b11000000;
      state.d = state.q+clk;
//      if (state.d == 8){
//      state.q =
//        }
      case(state.q){
          state.OOO: ain = 0; bin = 0; cin = 0; state.d = state.OOI; io_sel = ~4h1; io_seg = 8b00111111;// io_sel = ~4h2; io_seg = 8b00111111; io_sel = ~4h3; io_seg = 8b00111111;
          state.OOI: ain = 0; bin = 0; cin = 1; state.d = state.OIO; io_sel = ~4h1; io_seg = 8b00000110;
          state.OIO: ain = 0; bin = 1; cin = 0; state.d = state.OII; io_sel = ~4h1; io_seg = 8b00111111;
          state.OII: ain = 0; bin = 1; cin = 1; state.d = state.IOO; io_sel = ~4h1; io_seg = 8b00000110;
          state.IOO: ain = 1; bin = 0; cin = 0; state.d = state.IOI; io_sel = ~4h1; io_seg = 8b00111111;
          state.IOI: ain = 1; bin = 0; cin = 1; state.d = state.IIO; io_sel = ~4h1; io_seg = 8b00000110;
          state.IIO: ain = 1; bin = 1; cin = 0; state.d = state.III; io_sel = ~4h1; io_seg = 8b00111111;
          state.III: ain = 1; bin = 1; cin = 1; state.d = state.OOO; io_sel = ~4h1; io_seg = 8b00000110;
          default: ain = 0; bin = 0; cin =0; io_sel = ~4h1; io_seg = 8b00000000;
          }     
        }
    
    else{
      count = 0;
      ain = io_dip[1];
      bin = io_dip[2];
      cin = io_dip[3];
      io_sel = ~4h1; io_seg= 8b11111111;
      }
          
      
    
//    led = c{3b0, io_button};  // connect buttons to LEDs
//    spi_miso = bz;            // not using SPI
//    spi_channel = bzzzz;      // not using flags
//    avr_rx = bz;              // not using serial port
    
//    edge_detector.in = ctr.value;
//    dec_ctr.inc = edge_detector.out;
//    seg.values = dec_ctr.digits;
    
//    io_seg = ~seg.seg; // connect segments to the driver
//  io_sel = ~seg.sel; // connect digit select to the driver
    
//    io_led = io_dip;   // connect the DIP switches to the LEDs
  }    
}